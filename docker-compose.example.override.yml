# Example override file used for local development or staging setups.
# Copy to `docker-compose.override.yml` and adjust credentials before use.
version: '3.9'

services:
  db:
    profiles: ['dev', 'prod']
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    profiles: ['dev']
    environment:
      LOG_LEVEL: DEBUG
      ENVIRONMENT: development
      DEBUG: 'true'
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'python', '-c', "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/health')"]
      interval: 20s
      timeout: 5s
      retries: 5

  frontend:
    profiles: ['dev']
    command: npm run dev -- --hostname 0.0.0.0
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8000/api
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', "node -e \"fetch('http://localhost:3000/api/health').then(() => process.exit(0)).catch(() => process.exit(1))\""]
      interval: 30s
      timeout: 10s
      retries: 5

  backend-prod:
    profiles: ['prod']
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    environment:
      ENVIRONMENT: production
      DEBUG: 'false'
      LOG_LEVEL: INFO
    command: gunicorn app.main:app -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000 --workers=${UVICORN_WORKERS:-4}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'python', '-c', "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 5

  frontend-prod:
    profiles: ['prod']
    build:
      context: ./frontend-nextjs
      dockerfile: ../docker/Dockerfile.frontend-nextjs
      target: production
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.uns-kikaku.com}
    command: npm run start
    depends_on:
      backend-prod:
        condition: service_healthy
    ports:
      - '3000:3000'
    healthcheck:
      test: ['CMD-SHELL', "node -e \"fetch('http://localhost:3000').then(() => process.exit(0)).catch(() => process.exit(1))\""]
      interval: 30s
      timeout: 10s
      retries: 5
