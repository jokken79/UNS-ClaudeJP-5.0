services:
  db:
    image: postgres:15-alpine
    container_name: uns-claudejp-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./base-datos/01_init_database.sql:/docker-entrypoint-initdb.d/01_init_database.sql:ro
    ports:
      - "5432:5432"
    networks:
      - uns-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 90s
    profiles: ["dev", "prod"]

  importer:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: uns-claudejp-importer
    restart: 'no'
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-480}
      APP_NAME: ${APP_NAME:-UNS-ClaudeJP 5.0}
      APP_VERSION: ${APP_VERSION:-5.0.1}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - ./backend:/app
      - ./config:/app/config
    depends_on:
      db:
        condition: service_healthy
    networks:
      - uns-network
    command: >
      sh -c "
        echo '--- Running Alembic migrations ---' &&
        python scripts/manage_db.py migrate &&
        echo '--- Seeding demo data ---' &&
        python scripts/manage_db.py seed &&
        echo '--- Running import_data.py ---' &&
        python scripts/import_data.py &&
        echo '--- Import tasks completed ---'
      "
    profiles: ["dev", "prod"]

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: uns-claudejp-backend
    restart: always
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-480}
      APP_NAME: ${APP_NAME:-UNS-ClaudeJP 5.0}
      APP_VERSION: ${APP_VERSION:-5.0.1}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      UPLOAD_DIR: /app/uploads
      MAX_UPLOAD_SIZE: ${MAX_UPLOAD_SIZE:-10485760}
      OCR_ENABLED: ${OCR_ENABLED:-true}
      TESSERACT_LANG: ${TESSERACT_LANG:-jpn+eng}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GOOGLE_CLOUD_VISION_ENABLED: ${GOOGLE_CLOUD_VISION_ENABLED:-false}
      GOOGLE_CLOUD_VISION_API_KEY: ${GOOGLE_CLOUD_VISION_API_KEY}
      AZURE_COMPUTER_VISION_ENDPOINT: ${AZURE_COMPUTER_VISION_ENDPOINT}
      AZURE_COMPUTER_VISION_KEY: ${AZURE_COMPUTER_VISION_KEY}
      AZURE_COMPUTER_VISION_API_VERSION: ${AZURE_COMPUTER_VISION_API_VERSION:-2023-02-01-preview}
      LINE_CHANNEL_ACCESS_TOKEN: ${LINE_CHANNEL_ACCESS_TOKEN:-}
      SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_FROM: ${SMTP_FROM:-noreply@uns-kikaku.com}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: ${LOG_FILE:-/app/logs/uns-claudejp.log}
      COMPANY_NAME: ${COMPANY_NAME:-UNS-Kikaku}
      COMPANY_WEBSITE: ${COMPANY_WEBSITE:-https://www.uns-kikaku.com}
      ENABLE_TELEMETRY: ${ENABLE_TELEMETRY:-true}
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME:-uns-claudejp-backend}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${OTEL_EXPORTER_OTLP_METRICS_ENDPOINT:-http://otel-collector:4317}
      OTEL_METRICS_EXPORT_INTERVAL_MS: ${OTEL_METRICS_EXPORT_INTERVAL_MS:-60000}
      PROMETHEUS_METRICS_PATH: ${PROMETHEUS_METRICS_PATH:-/metrics}
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./config:/app/config
      - ./logs:/app/logs
      - ./.env:/app/.env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      importer:
        condition: service_completed_successfully
      otel-collector:
        condition: service_healthy
    networks:
      - uns-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    profiles: ["dev"]

  backend-prod:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: uns-claudejp-backend-prod
    restart: always
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-480}
      APP_NAME: ${APP_NAME:-UNS-ClaudeJP 5.0}
      APP_VERSION: ${APP_VERSION:-5.0.1}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      FRONTEND_URL: ${FRONTEND_URL:-https://app.uns-kikaku.com}
      UPLOAD_DIR: /app/uploads
      MAX_UPLOAD_SIZE: ${MAX_UPLOAD_SIZE:-10485760}
      OCR_ENABLED: ${OCR_ENABLED:-true}
      TESSERACT_LANG: ${TESSERACT_LANG:-jpn+eng}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GOOGLE_CLOUD_VISION_ENABLED: ${GOOGLE_CLOUD_VISION_ENABLED:-false}
      GOOGLE_CLOUD_VISION_API_KEY: ${GOOGLE_CLOUD_VISION_API_KEY}
      AZURE_COMPUTER_VISION_ENDPOINT: ${AZURE_COMPUTER_VISION_ENDPOINT}
      AZURE_COMPUTER_VISION_KEY: ${AZURE_COMPUTER_VISION_KEY}
      AZURE_COMPUTER_VISION_API_VERSION: ${AZURE_COMPUTER_VISION_API_VERSION:-2023-02-01-preview}
      LINE_CHANNEL_ACCESS_TOKEN: ${LINE_CHANNEL_ACCESS_TOKEN:-}
      SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_FROM: ${SMTP_FROM:-noreply@uns-kikaku.com}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: ${LOG_FILE:-/app/logs/uns-claudejp.log}
      COMPANY_NAME: ${COMPANY_NAME:-UNS-Kikaku}
      COMPANY_WEBSITE: ${COMPANY_WEBSITE:-https://www.uns-kikaku.com}
      ENABLE_TELEMETRY: ${ENABLE_TELEMETRY:-true}
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME:-uns-claudejp-backend}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${OTEL_EXPORTER_OTLP_METRICS_ENDPOINT:-http://otel-collector:4317}
      OTEL_METRICS_EXPORT_INTERVAL_MS: ${OTEL_METRICS_EXPORT_INTERVAL_MS:-60000}
      PROMETHEUS_METRICS_PATH: ${PROMETHEUS_METRICS_PATH:-/metrics}
    depends_on:
      db:
        condition: service_healthy
      importer:
        condition: service_completed_successfully
      otel-collector:
        condition: service_healthy
    networks:
      - uns-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
    profiles: ["prod"]

  frontend:
    build:
      context: ./frontend-nextjs
      dockerfile: ../docker/Dockerfile.frontend-nextjs
      target: development
    container_name: uns-claudejp-frontend
    restart: always
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000/api
      NEXT_PUBLIC_APP_VERSION: ${APP_VERSION:-5.0.1}
      NEXT_PUBLIC_APP_NAME: ${APP_NAME:-UNS-ClaudeJP 5.0}
      NEXT_PUBLIC_OTEL_EXPORTER_URL: ${NEXT_PUBLIC_OTEL_EXPORTER_URL:-http://otel-collector:4318/v1/traces}
      NEXT_PUBLIC_GRAFANA_URL: ${NEXT_PUBLIC_GRAFANA_URL:-http://localhost:3001}
      NEXT_PUBLIC_TELEMETRY_SAMPLE_RATE: ${NEXT_PUBLIC_TELEMETRY_SAMPLE_RATE:-1}
      NODE_ENV: development
    volumes:
      - ./frontend-nextjs:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - uns-network
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: npm run dev
    profiles: ["dev"]

  frontend-prod:
    build:
      context: ./frontend-nextjs
      dockerfile: ../docker/Dockerfile.frontend-nextjs
      target: runner
    container_name: uns-claudejp-frontend-prod
    restart: always
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.uns-kikaku.com/api}
      NEXT_PUBLIC_APP_VERSION: ${APP_VERSION:-5.0.1}
      NEXT_PUBLIC_APP_NAME: ${APP_NAME:-UNS-ClaudeJP 5.0}
      NEXT_PUBLIC_OTEL_EXPORTER_URL: ${NEXT_PUBLIC_OTEL_EXPORTER_URL:-http://otel-collector:4318/v1/traces}
      NEXT_PUBLIC_GRAFANA_URL: ${NEXT_PUBLIC_GRAFANA_URL:-http://localhost:3001}
      NEXT_PUBLIC_TELEMETRY_SAMPLE_RATE: ${NEXT_PUBLIC_TELEMETRY_SAMPLE_RATE:-1}
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      backend-prod:
        condition: service_healthy
    networks:
      - uns-network
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles: ["prod"]

  adminer:
    image: adminer
    container_name: uns-claudejp-adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - uns-network
    profiles: ["dev"]

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.103.0
    container_name: uns-claudejp-otel
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./docker/observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"
      - "4318:4318"
      - "13133:13133"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:13133/healthz"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - uns-network
    profiles: ["dev", "prod"]

  tempo:
    image: grafana/tempo:2.5.0
    container_name: uns-claudejp-tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./docker/observability/tempo.yaml:/etc/tempo.yaml:ro
      - tempo_data:/var/tempo
    ports:
      - "3200:3200"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3200/status" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - uns-network
    profiles: ["dev", "prod"]

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: uns-claudejp-prometheus
    command: ["--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.path=/prometheus"]
    volumes:
      - ./docker/observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - uns-network
    profiles: ["dev", "prod"]

  grafana:
    image: grafana/grafana:11.2.0
    container_name: uns-claudejp-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/observability/grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on:
      prometheus:
        condition: service_healthy
      tempo:
        condition: service_healthy
    networks:
      - uns-network
    profiles: ["dev", "prod"]

volumes:
  postgres_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  tempo_data:
    driver: local

networks:
  uns-network:
    driver: bridge
