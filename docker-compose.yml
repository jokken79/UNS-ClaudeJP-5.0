services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: uns-claudejp-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./base-datos/01_init_database.sql:/docker-entrypoint-initdb.d/01_init_database.sql:ro
    ports:
      - "5432:5432"
    networks:
      - uns-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 90s  # Aumentado de 60s a 90s para sistemas lentos

  # Data Importer
  importer:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: uns-claudejp-importer
    restart: 'no'
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-480}
      
      # Application
      APP_NAME: ${APP_NAME:-UNS-ClaudeJP 5.0}
      APP_VERSION: -e
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - ./backend:/app
      - ./config:/app/config
    depends_on:
      db:
        condition: service_healthy
    networks:
      - uns-network
    command: >
      sh -c "
        echo '--- Running Alembic migrations ---' &&
        alembic upgrade head &&
        echo '--- Running create_admin_user.py ---' &&
        python scripts/create_admin_user.py &&
        echo '--- Running import_data.py ---' &&
        python scripts/import_data.py &&
        echo '--- Seeding demo candidates when database is empty ---' &&
        python scripts/import_demo_candidates.py &&
        echo '--- Checking for Access candidate dataset (optional) ---' &&
        if [ -f '/app/access_candidates_data.json' ]; then
          echo '--- ⚠ access_candidates_data.json detected. Import tooling must be run manually after reinstall. ---'
        else
          echo '--- No Access candidate dataset supplied. Skipping Access import. ---'
        fi &&
        echo '--- Checking for Access photo mappings (optional) ---' &&
        if [ -f '/app/access_photo_mappings.json' ]; then
          echo '--- Access photo mappings found. Importing photos into database. ---' &&
          if python scripts/unified_photo_import.py import-photos --file /app/access_photo_mappings.json --batch-size 100; then
            echo '--- ✓ Photo import completed. ---'
          else
            echo '--- ⚠ Photo import failed. Review unified_photo_import logs for details. ---'
          fi
        else
          echo '--- No Access photo mappings supplied. Skipping photo import. ---'
        fi
      "

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: uns-claudejp-backend
    restart: always
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

      # Security
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-480}

      # Application
      APP_NAME: ${APP_NAME:-UNS-ClaudeJP 5.0}
      APP_VERSION: -e
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}

      # File Upload
      UPLOAD_DIR: /app/uploads
      MAX_UPLOAD_SIZE: ${MAX_UPLOAD_SIZE:-10485760}

      # OCR Services
      OCR_ENABLED: ${OCR_ENABLED:-true}
      TESSERACT_LANG: ${TESSERACT_LANG:-jpn+eng}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GOOGLE_CLOUD_VISION_ENABLED: ${GOOGLE_CLOUD_VISION_ENABLED:-false}
      GOOGLE_CLOUD_VISION_API_KEY: ${GOOGLE_CLOUD_VISION_API_KEY}
      AZURE_COMPUTER_VISION_ENDPOINT: ${AZURE_COMPUTER_VISION_ENDPOINT}
      AZURE_COMPUTER_VISION_KEY: ${AZURE_COMPUTER_VISION_KEY}
      AZURE_COMPUTER_VISION_API_VERSION: ${AZURE_COMPUTER_VISION_API_VERSION:-2023-02-01-preview}

      # Notifications
      LINE_CHANNEL_ACCESS_TOKEN: ${LINE_CHANNEL_ACCESS_TOKEN:-}
      SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_FROM: ${SMTP_FROM:-noreply@uns-kikaku.com}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: ${LOG_FILE:-/app/logs/uns-claudejp.log}

      # Company Info
      COMPANY_NAME: ${COMPANY_NAME:-UNS-Kikaku}
      COMPANY_WEBSITE: ${COMPANY_WEBSITE:-https://www.uns-kikaku.com}
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./config:/app/config
      - ./logs:/app/logs
      - ./.env:/app/.env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      importer:
        condition: service_completed_successfully
    networks:
      - uns-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s  # Aumentado de 40s a 90s para dar tiempo a migraciones
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend (Next.js 15)
  frontend:
    build:
      context: ./frontend-nextjs
      dockerfile: ../docker/Dockerfile.frontend-nextjs
      target: development
    container_name: uns-claudejp-frontend
    restart: always
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000/api
      NEXT_PUBLIC_APP_VERSION: 5.0.0
      NEXT_PUBLIC_APP_NAME: UNS-ClaudeJP 5.0
      NODE_ENV: development
    volumes:
      - ./frontend-nextjs:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - uns-network
    stdin_open: true
    tty: true
    command: npm run dev

  # Database Management (Adminer)
  adminer:
    image: adminer
    container_name: uns-claudejp-adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - uns-network

volumes:
  postgres_data:
    driver: local

networks:
  uns-network:
    driver: bridge
